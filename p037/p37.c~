/*
 * The number 3797 has an interesting property. Being prime itself, it is
 * possible to continuously remove digits from left to right, and remain prime
 * at each stage: 3797, 797, 97, and 7. Similarly, we can work from right to
 * left: 3797, 379, 37, 3.
 * Find the sum of the eleven primes that are both truncatable from left to
 * right and right to left. 
 * NOTE: 2, 3, 5, and 7 are not considered to be truncatable primes.
 */

#include <stdio.h>

#define MAX 1000000

int main() {
    // The leftmost digit has to be 2, 3, 5, or 7
    // The rightmost digit has to be 3 or 7

    // Sieve of Erathosthenes to find primes below 1000000
    int p = 2, multiple;
    char number[MAX] = "";
    int primes[MAX], count = 0;
    while (p < MAX) {
        if (number[p] == 0) {
            primes[count] = p;
            multiple = p;
            while (multiple < MAX) {
                number[multiple] = 1;
                multiple += p;
            }
            count++;
        }
        p++;
    }

    int i;
    for (i = 0; i < count; i++) {
        primes[i]
    }

}

int numLength(int num) {
    if (num < 0)
        return 0;
    else if (num < 10)
        return 1;
    if (num < 10)


}

void truncatableLR(int num) {
    
}
